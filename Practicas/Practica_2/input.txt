#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <stdlib.h>
#include <signal.h>
#include <errno.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>

const int BUFFER_SZ = 64;

void catch_int_info(int sig_num, siginfo_t *psiginfo, void *pcontext);
void catch_child(int sig_num, siginfo_t *psiginfo, void *pcontext);

void child(int *rPipe, int* wPipe);
void parent(int *rPipe, int* wPipe);

int main(){

	int p2c[2], c2p[2];	// parent -> child y viceversa

	pid_t pid;
	printf("Mi pid es %d\n", getpid());

	if( (pipe(p2c) == -1) || (pipe(c2p) == -1) ){
		perror("Error in creation pipe: ");
		exit(EXIT_FAILURE);
	}

	// Seteo un handler para algunas señales
	struct sigaction act;

	// Child stopped or terminated
	act.sa_flags = SA_SIGINFO;
	act.sa_sigaction = catch_child;
	sigfillset(&act.sa_mask);
	sigaction(SIGCHLD, &act, NULL);
	
	// Broken pipe: write to pipe with no readers;
	act.sa_flags = SA_SIGINFO;
	act.sa_sigaction = catch_int_info;
	sigfillset(&act.sa_mask);
	sigaction(SIGPIPE, &act, NULL);


	pid = fork();	// Duplico el proceso

	switch (pid){
		case 0:
			printf("Child (%d)\n", getpid());
			child(p2c, c2p);
			break;
		case -1:
			perror("Fork error: ");
			break;
		default:
			printf("Parent (%d) with child (%d)\n", getpid(), pid);
			parent(c2p, p2c);
			break;
	}
}



void child(int *rPipe, int* wPipe){
	
	if(close(wPipe[0]) == -1){
		perror("Error close wPipe[0]");
		exit(EXIT_FAILURE);
	}
	if(close(rPipe[1]) == -1){
		perror("Error close rPipe[1]");
		exit(EXIT_FAILURE);
	}

	if(dup2(rPipe[0], STDIN_FILENO) == -1){
		perror("dup2 error: ");
		exit(EXIT_FAILURE);
	}
	if(dup2(wPipe[1], STDOUT_FILENO) == -1){
		perror("dup2 error: ");
		exit(EXIT_FAILURE);
	}

	if(close(wPipe[1]) == -1){
		perror("Error close wPipe[1]");
		exit(EXIT_FAILURE);
	}
	if(close(rPipe[0]) == -1){
		perror("Error close rPipe[0]");
		exit(EXIT_FAILURE);
	}

	if(execl("/usr/bin/perl", "perl", "-pe", "$_ = uc $_", (char *) NULL) < 0){
		perror("Child execl");
		exit(EXIT_FAILURE);
	}
}

void parent(int *rPipe, int* wPipe){

	if(close(wPipe[0]) == -1){
		perror("Error close wPipe[0]");
		exit(EXIT_FAILURE);
	}
	if(close(rPipe[1]) == -1){
		perror("Error close rPipe[1]");
		exit(EXIT_FAILURE);
	}

	// Leo del standard input
	char buffer[BUFFER_SZ];
	memset(buffer, 0, BUFFER_SZ);
	if( read(STDIN_FILENO, buffer, BUFFER_SZ) == -1){
		perror("Error reading from stdin");
		exit(EXIT_FAILURE);
	}

	// Mandamos el mensaje al child por el pipe
	if( write(wPipe[1], buffer, strlen(buffer)) == -1){
		perror("Error writing to child");
		exit(EXIT_FAILURE);
	}
	
	/* cierro el pipe de father->child para que child ejecute*/
	if(close(wPipe[1]) == -1){
		perror("Error close wPipe[1]");
		exit(EXIT_FAILURE);
	}
	
	// Ahora leemos lo que nos haya mandado el child
	memset(buffer, 0, strlen(buffer));
	if( read(rPipe[0], buffer, BUFFER_SZ) == -1){
		perror("Error reading from child");
		exit(EXIT_FAILURE);
	}

	// Por ultimo, mandamos standard input
	if( write(STDOUT_FILENO, buffer, strlen(buffer)) == -1){
		perror("Error writing to child");
		exit(EXIT_FAILURE);
	}

	// if(close(wPipe[1]) == -1){
	// 	perror("Error close wPipe[1]");
	// 	exit(EXIT_FAILURE);
	// }
	if(close(rPipe[0]) == -1){
		perror("Error close rPipe[0]");
		exit(EXIT_FAILURE);
	}
}


void catch_int_info(int sig_num, siginfo_t *psiginfo, void *pcontext){
	printf("Recibi la senal #%d %s de %d, code: %d\n",
		sig_num, strsignal(sig_num), psiginfo->si_pid, psiginfo->si_code);
}

void catch_child(int sig_num, siginfo_t *psiginfo, void *pcontext){

	wait(NULL); /*Mandamos null porque en siginfo_t ya esta todo*/
	// catch_int_info(sig_num, psiginfo, pcontext);
	printf("Recibi la senal #%d %s de %d, code: %d\n",
		sig_num, strsignal(sig_num), psiginfo->si_pid, psiginfo->si_code);
}#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <stdlib.h>
#include <signal.h>
#include <errno.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>

const int BUFFER_SZ = 64;

void catch_int_info(int sig_num, siginfo_t *psiginfo, void *pcontext);
void catch_child(int sig_num, siginfo_t *psiginfo, void *pcontext);

void child(int *rPipe, int* wPipe);
void parent(int *rPipe, int* wPipe);

int main(){

	int p2c[2], c2p[2];	// parent -> child y viceversa

	pid_t pid;
	printf("Mi pid es %d\n", getpid());

	if( (pipe(p2c) == -1) || (pipe(c2p) == -1) ){
		perror("Error in creation pipe: ");
		exit(EXIT_FAILURE);
	}

	// Seteo un handler para algunas señales
	struct sigaction act;

	// Child stopped or terminated
	act.sa_flags = SA_SIGINFO;
	act.sa_sigaction = catch_child;
	sigfillset(&act.sa_mask);
	sigaction(SIGCHLD, &act, NULL);
	
	// Broken pipe: write to pipe with no readers;
	act.sa_flags = SA_SIGINFO;
	act.sa_sigaction = catch_int_info;
	sigfillset(&act.sa_mask);
	sigaction(SIGPIPE, &act, NULL);


	pid = fork();	// Duplico el proceso

	switch (pid){
		case 0:
			printf("Child (%d)\n", getpid());
			child(p2c, c2p);
			break;
		case -1:
			perror("Fork error: ");
			break;
		default:
			printf("Parent (%d) with child (%d)\n", getpid(), pid);
			parent(c2p, p2c);
			break;
	}
}



void child(int *rPipe, int* wPipe){
	
	if(close(wPipe[0]) == -1){
		perror("Error close wPipe[0]");
		exit(EXIT_FAILURE);
	}
	if(close(rPipe[1]) == -1){
		perror("Error close rPipe[1]");
		exit(EXIT_FAILURE);
	}

	if(dup2(rPipe[0], STDIN_FILENO) == -1){
		perror("dup2 error: ");
		exit(EXIT_FAILURE);
	}
	if(dup2(wPipe[1], STDOUT_FILENO) == -1){
		perror("dup2 error: ");
		exit(EXIT_FAILURE);
	}

	if(close(wPipe[1]) == -1){
		perror("Error close wPipe[1]");
		exit(EXIT_FAILURE);
	}
	if(close(rPipe[0]) == -1){
		perror("Error close rPipe[0]");
		exit(EXIT_FAILURE);
	}

	if(execl("/usr/bin/perl", "perl", "-pe", "$_ = uc $_", (char *) NULL) < 0){
		perror("Child execl");
		exit(EXIT_FAILURE);
	}
}

void parent(int *rPipe, int* wPipe){

	if(close(wPipe[0]) == -1){
		perror("Error close wPipe[0]");
		exit(EXIT_FAILURE);
	}
	if(close(rPipe[1]) == -1){
		perror("Error close rPipe[1]");
		exit(EXIT_FAILURE);
	}

	// Leo del standard input
	char buffer[BUFFER_SZ];
	memset(buffer, 0, BUFFER_SZ);
	if( read(STDIN_FILENO, buffer, BUFFER_SZ) == -1){
		perror("Error reading from stdin");
		exit(EXIT_FAILURE);
	}

	// Mandamos el mensaje al child por el pipe
	if( write(wPipe[1], buffer, strlen(buffer)) == -1){
		perror("Error writing to child");
		exit(EXIT_FAILURE);
	}
	
	/* cierro el pipe de father->child para que child ejecute*/
	if(close(wPipe[1]) == -1){
		perror("Error close wPipe[1]");
		exit(EXIT_FAILURE);
	}
	
	// Ahora leemos lo que nos haya mandado el child
	memset(buffer, 0, strlen(buffer));
	if( read(rPipe[0], buffer, BUFFER_SZ) == -1){
		perror("Error reading from child");
		exit(EXIT_FAILURE);
	}

	// Por ultimo, mandamos standard input
	if( write(STDOUT_FILENO, buffer, strlen(buffer)) == -1){
		perror("Error writing to child");
		exit(EXIT_FAILURE);
	}

	// if(close(wPipe[1]) == -1){
	// 	perror("Error close wPipe[1]");
	// 	exit(EXIT_FAILURE);
	// }
	if(close(rPipe[0]) == -1){
		perror("Error close rPipe[0]");
		exit(EXIT_FAILURE);
	}
}


void catch_int_info(int sig_num, siginfo_t *psiginfo, void *pcontext){
	printf("Recibi la senal #%d %s de %d, code: %d\n",
		sig_num, strsignal(sig_num), psiginfo->si_pid, psiginfo->si_code);
}

void catch_child(int sig_num, siginfo_t *psiginfo, void *pcontext){

	wait(NULL); /*Mandamos null porque en siginfo_t ya esta todo*/
	// catch_int_info(sig_num, psiginfo, pcontext);
	printf("Recibi la senal #%d %s de %d, code: %d\n",
		sig_num, strsignal(sig_num), psiginfo->si_pid, psiginfo->si_code);
}#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <stdlib.h>
#include <signal.h>
#include <errno.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>

const int BUFFER_SZ = 64;

void catch_int_info(int sig_num, siginfo_t *psiginfo, void *pcontext);
void catch_child(int sig_num, siginfo_t *psiginfo, void *pcontext);

void child(int *rPipe, int* wPipe);
void parent(int *rPipe, int* wPipe);

int main(){

	int p2c[2], c2p[2];	// parent -> child y viceversa

	pid_t pid;
	printf("Mi pid es %d\n", getpid());

	if( (pipe(p2c) == -1) || (pipe(c2p) == -1) ){
		perror("Error in creation pipe: ");
		exit(EXIT_FAILURE);
	}

	// Seteo un handler para algunas señales
	struct sigaction act;

	// Child stopped or terminated
	act.sa_flags = SA_SIGINFO;
	act.sa_sigaction = catch_child;
	sigfillset(&act.sa_mask);
	sigaction(SIGCHLD, &act, NULL);
	
	// Broken pipe: write to pipe with no readers;
	act.sa_flags = SA_SIGINFO;
	act.sa_sigaction = catch_int_info;
	sigfillset(&act.sa_mask);
	sigaction(SIGPIPE, &act, NULL);


	pid = fork();	// Duplico el proceso

	switch (pid){
		case 0:
			printf("Child (%d)\n", getpid());
			child(p2c, c2p);
			break;
		case -1:
			perror("Fork error: ");
			break;
		default:
			printf("Parent (%d) with child (%d)\n", getpid(), pid);
			parent(c2p, p2c);
			break;
	}
}



void child(int *rPipe, int* wPipe){
	
	if(close(wPipe[0]) == -1){
		perror("Error close wPipe[0]");
		exit(EXIT_FAILURE);
	}
	if(close(rPipe[1]) == -1){
		perror("Error close rPipe[1]");
		exit(EXIT_FAILURE);
	}

	if(dup2(rPipe[0], STDIN_FILENO) == -1){
		perror("dup2 error: ");
		exit(EXIT_FAILURE);
	}
	if(dup2(wPipe[1], STDOUT_FILENO) == -1){
		perror("dup2 error: ");
		exit(EXIT_FAILURE);
	}

	if(close(wPipe[1]) == -1){
		perror("Error close wPipe[1]");
		exit(EXIT_FAILURE);
	}
	if(close(rPipe[0]) == -1){
		perror("Error close rPipe[0]");
		exit(EXIT_FAILURE);
	}

	if(execl("/usr/bin/perl", "perl", "-pe", "$_ = uc $_", (char *) NULL) < 0){
		perror("Child execl");
		exit(EXIT_FAILURE);
	}
}

void parent(int *rPipe, int* wPipe){

	if(close(wPipe[0]) == -1){
		perror("Error close wPipe[0]");
		exit(EXIT_FAILURE);
	}
	if(close(rPipe[1]) == -1){
		perror("Error close rPipe[1]");
		exit(EXIT_FAILURE);
	}

	// Leo del standard input
	char buffer[BUFFER_SZ];
	memset(buffer, 0, BUFFER_SZ);
	if( read(STDIN_FILENO, buffer, BUFFER_SZ) == -1){
		perror("Error reading from stdin");
		exit(EXIT_FAILURE);
	}

	// Mandamos el mensaje al child por el pipe
	if( write(wPipe[1], buffer, strlen(buffer)) == -1){
		perror("Error writing to child");
		exit(EXIT_FAILURE);
	}
	
	/* cierro el pipe de father->child para que child ejecute*/
	if(close(wPipe[1]) == -1){
		perror("Error close wPipe[1]");
		exit(EXIT_FAILURE);
	}
	
	// Ahora leemos lo que nos haya mandado el child
	memset(buffer, 0, strlen(buffer));
	if( read(rPipe[0], buffer, BUFFER_SZ) == -1){
		perror("Error reading from child");
		exit(EXIT_FAILURE);
	}

	// Por ultimo, mandamos standard input
	if( write(STDOUT_FILENO, buffer, strlen(buffer)) == -1){
		perror("Error writing to child");
		exit(EXIT_FAILURE);
	}

	// if(close(wPipe[1]) == -1){
	// 	perror("Error close wPipe[1]");
	// 	exit(EXIT_FAILURE);
	// }
	if(close(rPipe[0]) == -1){
		perror("Error close rPipe[0]");
		exit(EXIT_FAILURE);
	}
}


void catch_int_info(int sig_num, siginfo_t *psiginfo, void *pcontext){
	printf("Recibi la senal #%d %s de %d, code: %d\n",
		sig_num, strsignal(sig_num), psiginfo->si_pid, psiginfo->si_code);
}

void catch_child(int sig_num, siginfo_t *psiginfo, void *pcontext){

	wait(NULL); /*Mandamos null porque en siginfo_t ya esta todo*/
	// catch_int_info(sig_num, psiginfo, pcontext);
	printf("Recibi la senal #%d %s de %d, code: %d\n",
		sig_num, strsignal(sig_num), psiginfo->si_pid, psiginfo->si_code);
}#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <stdlib.h>
#include <signal.h>
#include <errno.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>

const int BUFFER_SZ = 64;

void catch_int_info(int sig_num, siginfo_t *psiginfo, void *pcontext);
void catch_child(int sig_num, siginfo_t *psiginfo, void *pcontext);

void child(int *rPipe, int* wPipe);
void parent(int *rPipe, int* wPipe);

int main(){

	int p2c[2], c2p[2];	// parent -> child y viceversa

	pid_t pid;
	printf("Mi pid es %d\n", getpid());

	if( (pipe(p2c) == -1) || (pipe(c2p) == -1) ){
		perror("Error in creation pipe: ");
		exit(EXIT_FAILURE);
	}

	// Seteo un handler para algunas señales
	struct sigaction act;

	// Child stopped or terminated
	act.sa_flags = SA_SIGINFO;
	act.sa_sigaction = catch_child;
	sigfillset(&act.sa_mask);
	sigaction(SIGCHLD, &act, NULL);
	
	// Broken pipe: write to pipe with no readers;
	act.sa_flags = SA_SIGINFO;
	act.sa_sigaction = catch_int_info;
	sigfillset(&act.sa_mask);
	sigaction(SIGPIPE, &act, NULL);


	pid = fork();	// Duplico el proceso

	switch (pid){
		case 0:
			printf("Child (%d)\n", getpid());
			child(p2c, c2p);
			break;
		case -1:
			perror("Fork error: ");
			break;
		default:
			printf("Parent (%d) with child (%d)\n", getpid(), pid);
			parent(c2p, p2c);
			break;
	}
}



void child(int *rPipe, int* wPipe){
	
	if(close(wPipe[0]) == -1){
		perror("Error close wPipe[0]");
		exit(EXIT_FAILURE);
	}
	if(close(rPipe[1]) == -1){
		perror("Error close rPipe[1]");
		exit(EXIT_FAILURE);
	}

	if(dup2(rPipe[0], STDIN_FILENO) == -1){
		perror("dup2 error: ");
		exit(EXIT_FAILURE);
	}
	if(dup2(wPipe[1], STDOUT_FILENO) == -1){
		perror("dup2 error: ");
		exit(EXIT_FAILURE);
	}

	if(close(wPipe[1]) == -1){
		perror("Error close wPipe[1]");
		exit(EXIT_FAILURE);
	}
	if(close(rPipe[0]) == -1){
		perror("Error close rPipe[0]");
		exit(EXIT_FAILURE);
	}

	if(execl("/usr/bin/perl", "perl", "-pe", "$_ = uc $_", (char *) NULL) < 0){
		perror("Child execl");
		exit(EXIT_FAILURE);
	}
}

void parent(int *rPipe, int* wPipe){

	if(close(wPipe[0]) == -1){
		perror("Error close wPipe[0]");
		exit(EXIT_FAILURE);
	}
	if(close(rPipe[1]) == -1){
		perror("Error close rPipe[1]");
		exit(EXIT_FAILURE);
	}

	// Leo del standard input
	char buffer[BUFFER_SZ];
	memset(buffer, 0, BUFFER_SZ);
	if( read(STDIN_FILENO, buffer, BUFFER_SZ) == -1){
		perror("Error reading from stdin");
		exit(EXIT_FAILURE);
	}

	// Mandamos el mensaje al child por el pipe
	if( write(wPipe[1], buffer, strlen(buffer)) == -1){
		perror("Error writing to child");
		exit(EXIT_FAILURE);
	}
	
	/* cierro el pipe de father->child para que child ejecute*/
	if(close(wPipe[1]) == -1){
		perror("Error close wPipe[1]");
		exit(EXIT_FAILURE);
	}
	
	// Ahora leemos lo que nos haya mandado el child
	memset(buffer, 0, strlen(buffer));
	if( read(rPipe[0], buffer, BUFFER_SZ) == -1){
		perror("Error reading from child");
		exit(EXIT_FAILURE);
	}

	// Por ultimo, mandamos standard input
	if( write(STDOUT_FILENO, buffer, strlen(buffer)) == -1){
		perror("Error writing to child");
		exit(EXIT_FAILURE);
	}

	// if(close(wPipe[1]) == -1){
	// 	perror("Error close wPipe[1]");
	// 	exit(EXIT_FAILURE);
	// }
	if(close(rPipe[0]) == -1){
		perror("Error close rPipe[0]");
		exit(EXIT_FAILURE);
	}
}


void catch_int_info(int sig_num, siginfo_t *psiginfo, void *pcontext){
	printf("Recibi la senal #%d %s de %d, code: %d\n",
		sig_num, strsignal(sig_num), psiginfo->si_pid, psiginfo->si_code);
}

void catch_child(int sig_num, siginfo_t *psiginfo, void *pcontext){

	wait(NULL); /*Mandamos null porque en siginfo_t ya esta todo*/
	// catch_int_info(sig_num, psiginfo, pcontext);
	printf("Recibi la senal #%d %s de %d, code: %d\n",
		sig_num, strsignal(sig_num), psiginfo->si_pid, psiginfo->si_code);
}#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <stdlib.h>
#include <signal.h>
#include <errno.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>

const int BUFFER_SZ = 64;

void catch_int_info(int sig_num, siginfo_t *psiginfo, void *pcontext);
void catch_child(int sig_num, siginfo_t *psiginfo, void *pcontext);

void child(int *rPipe, int* wPipe);
void parent(int *rPipe, int* wPipe);

int main(){

	int p2c[2], c2p[2];	// parent -> child y viceversa

	pid_t pid;
	printf("Mi pid es %d\n", getpid());

	if( (pipe(p2c) == -1) || (pipe(c2p) == -1) ){
		perror("Error in creation pipe: ");
		exit(EXIT_FAILURE);
	}

	// Seteo un handler para algunas señales
	struct sigaction act;

	// Child stopped or terminated
	act.sa_flags = SA_SIGINFO;
	act.sa_sigaction = catch_child;
	sigfillset(&act.sa_mask);
	sigaction(SIGCHLD, &act, NULL);
	
	// Broken pipe: write to pipe with no readers;
	act.sa_flags = SA_SIGINFO;
	act.sa_sigaction = catch_int_info;
	sigfillset(&act.sa_mask);
	sigaction(SIGPIPE, &act, NULL);


	pid = fork();	// Duplico el proceso

	switch (pid){
		case 0:
			printf("Child (%d)\n", getpid());
			child(p2c, c2p);
			break;
		case -1:
			perror("Fork error: ");
			break;
		default:
			printf("Parent (%d) with child (%d)\n", getpid(), pid);
			parent(c2p, p2c);
			break;
	}
}



void child(int *rPipe, int* wPipe){
	
	if(close(wPipe[0]) == -1){
		perror("Error close wPipe[0]");
		exit(EXIT_FAILURE);
	}
	if(close(rPipe[1]) == -1){
		perror("Error close rPipe[1]");
		exit(EXIT_FAILURE);
	}

	if(dup2(rPipe[0], STDIN_FILENO) == -1){
		perror("dup2 error: ");
		exit(EXIT_FAILURE);
	}
	if(dup2(wPipe[1], STDOUT_FILENO) == -1){
		perror("dup2 error: ");
		exit(EXIT_FAILURE);
	}

	if(close(wPipe[1]) == -1){
		perror("Error close wPipe[1]");
		exit(EXIT_FAILURE);
	}
	if(close(rPipe[0]) == -1){
		perror("Error close rPipe[0]");
		exit(EXIT_FAILURE);
	}

	if(execl("/usr/bin/perl", "perl", "-pe", "$_ = uc $_", (char *) NULL) < 0){
		perror("Child execl");
		exit(EXIT_FAILURE);
	}
}

void parent(int *rPipe, int* wPipe){

	if(close(wPipe[0]) == -1){
		perror("Error close wPipe[0]");
		exit(EXIT_FAILURE);
	}
	if(close(rPipe[1]) == -1){
		perror("Error close rPipe[1]");
		exit(EXIT_FAILURE);
	}

	// Leo del standard input
	char buffer[BUFFER_SZ];
	memset(buffer, 0, BUFFER_SZ);
	if( read(STDIN_FILENO, buffer, BUFFER_SZ) == -1){
		perror("Error reading from stdin");
		exit(EXIT_FAILURE);
	}

	// Mandamos el mensaje al child por el pipe
	if( write(wPipe[1], buffer, strlen(buffer)) == -1){
		perror("Error writing to child");
		exit(EXIT_FAILURE);
	}
	
	/* cierro el pipe de father->child para que child ejecute*/
	// if(close(wPipe[1]) == -1){
	// 	perror("Error close wPipe[1]");
	// 	exit(EXIT_FAILURE);
	// }
	
	// Ahora leemos lo que nos haya mandado el child
	memset(buffer, 0, strlen(buffer));
	if( read(rPipe[0], buffer, BUFFER_SZ) == -1){
		perror("Error reading from child");
		exit(EXIT_FAILURE);
	}

	// Por ultimo, mandamos standard input
	if( write(STDOUT_FILENO, buffer, strlen(buffer)) == -1){
		perror("Error writing to child");
		exit(EXIT_FAILURE);
	}

	if(close(wPipe[1]) == -1){
		perror("Error close wPipe[1]");
		exit(EXIT_FAILURE);
	}
	if(close(rPipe[0]) == -1){
		perror("Error close rPipe[0]");
		exit(EXIT_FAILURE);
	}
}


void catch_int_info(int sig_num, siginfo_t *psiginfo, void *pcontext){
	printf("Recibi la senal #%d %s de %d, code: %d\n",
		sig_num, strsignal(sig_num), psiginfo->si_pid, psiginfo->si_code);
}

void catch_child(int sig_num, siginfo_t *psiginfo, void *pcontext){

	wait(NULL); /*Mandamos null porque en siginfo_t ya esta todo*/
	// catch_int_info(sig_num, psiginfo, pcontext);
	printf("Recibi la senal #%d %s de %d, code: %d\n",
		sig_num, strsignal(sig_num), psiginfo->si_pid, psiginfo->si_code);
}